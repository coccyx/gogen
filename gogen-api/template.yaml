AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  ApiGatewayS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ProdBucketName}/*'
                  - !Sub 'arn:aws:s3:::${StagingBucketName}/*'

  GoGenApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      OpenApiVersion: '2.0'
      Auth:
        DefaultAuthorizer: NONE
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: !If 
                - IsProduction
                - "'https://gogen.io'"
                - "'https://staging.gogen.io'"
              Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Requested-With'"
              Access-Control-Allow-Credentials: "'true'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: !If 
                - IsProduction
                - "'https://gogen.io'"
                - "'https://staging.gogen.io'"
              Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Requested-With'"
              Access-Control-Allow-Credentials: "'true'"
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Requested-With'"
        AllowOrigin: !If 
          - IsProduction
          - "'https://gogen.io'"
          - "'https://staging.gogen.io'"
        AllowCredentials: true
        MaxAge: 600
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          CachingEnabled: false
          ThrottlingBurstLimit: 5000
          ThrottlingRateLimit: 10000
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: GoGen API
          version: '1.0'
        paths:
          /linux/gogen:
            get:
              summary: Download Linux binary
              responses:
                '200':
                  description: Linux binary file
                  headers:
                    Content-Type:
                      schema:
                        type: string
                    Content-Disposition:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: aws
                integrationSubtype: s3
                credentials: !GetAtt ApiGatewayS3Role.Arn
                httpMethod: GET
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{key}'
                requestParameters:
                  integration.request.path.bucket: !If [IsProduction, !Ref ProdBucketName, !Ref StagingBucketName]
                  integration.request.path.key: "'linux/gogen'"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Content-Type: "'application/octet-stream'"
                      method.response.header.Content-Disposition: "'attachment; filename=\"gogen\"'"
          /windows/gogen.exe:
            get:
              summary: Download Windows binary
              responses:
                '200':
                  description: Windows binary file (.exe)
                  headers:
                    Content-Type:
                      schema:
                        type: string
                    Content-Disposition:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: aws
                integrationSubtype: s3
                credentials: !GetAtt ApiGatewayS3Role.Arn
                httpMethod: GET
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{key}'
                requestParameters:
                  integration.request.path.bucket: !If [IsProduction, !Ref ProdBucketName, !Ref StagingBucketName]
                  integration.request.path.key: "'windows/gogen.exe'"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Content-Type: "'application/x-msdownload'"
                      method.response.header.Content-Disposition: "'attachment; filename=\"gogen.exe\"'"
          /osx/gogen:
            get:
              summary: Download macOS binary
              responses:
                '200':
                  description: macOS binary file
                  headers:
                    Content-Type:
                      schema:
                        type: string
                    Content-Disposition:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: aws
                integrationSubtype: s3
                credentials: !GetAtt ApiGatewayS3Role.Arn
                httpMethod: GET
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{key}'
                requestParameters:
                  integration.request.path.bucket: !If [IsProduction, !Ref ProdBucketName, !Ref StagingBucketName]
                  integration.request.path.key: "'osx/gogen'"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Content-Type: "'application/octet-stream'"
                      method.response.header.Content-Disposition: "'attachment; filename=\"gogen\"'"
          /wasm/gogen.wasm:
            get:
              summary: Download WASM module
              responses:
                '200':
                  description: WASM module file (.wasm)
                  headers:
                    Content-Type:
                      schema:
                        type: string
                    Content-Disposition:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: aws
                integrationSubtype: s3
                credentials: !GetAtt ApiGatewayS3Role.Arn
                httpMethod: GET
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{key}'
                requestParameters:
                  integration.request.path.bucket: !If [IsProduction, !Ref ProdBucketName, !Ref StagingBucketName]
                  integration.request.path.key: "'wasm/gogen.wasm'"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Content-Type: "'application/wasm'"
                      method.response.header.Content-Disposition: "'attachment; filename=\"gogen.wasm\"'"
          /v1/get/{proxy+}:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFunction.Arn}/invocations"
            options:
              responses:
                '200':
                  description: CORS preflight response
                  headers:
                    Access-Control-Allow-Origin: { schema: { type: string } }
                    Access-Control-Allow-Methods: { schema: { type: string } }
                    Access-Control-Allow-Headers: { schema: { type: string } }
                    Access-Control-Allow-Credentials: { schema: { type: string } }
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Requested-With'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: !If [IsProduction, "'https://gogen.io'", "'https://staging.gogen.io'"]
                      method.response.header.Access-Control-Allow-Credentials: "'true'"
          /v1/list:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListFunction.Arn}/invocations"
            options:
              responses:
                '200': { description: CORS preflight response, headers: { Access-Control-Allow-Origin: { schema: { type: string } }, Access-Control-Allow-Methods: { schema: { type: string } }, Access-Control-Allow-Headers: { schema: { type: string } }, Access-Control-Allow-Credentials: { schema: { type: string } } } }
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates: { application/json: '{"statusCode": 200}' }
                responses:
                  default:
                    statusCode: '200'
                    responseParameters: { method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Requested-With'", method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'", method.response.header.Access-Control-Allow-Origin: !If [IsProduction, "'https://gogen.io'", "'https://staging.gogen.io'"], method.response.header.Access-Control-Allow-Credentials: "'true'" }
          /v1/search:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchFunction.Arn}/invocations"
            options:
              responses:
                '200': { description: CORS preflight response, headers: { Access-Control-Allow-Origin: { schema: { type: string } }, Access-Control-Allow-Methods: { schema: { type: string } }, Access-Control-Allow-Headers: { schema: { type: string } }, Access-Control-Allow-Credentials: { schema: { type: string } } } }
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates: { application/json: '{"statusCode": 200}' }
                responses:
                  default:
                    statusCode: '200'
                    responseParameters: { method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Requested-With'", method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'", method.response.header.Access-Control-Allow-Origin: !If [IsProduction, "'https://gogen.io'", "'https://staging.gogen.io'"], method.response.header.Access-Control-Allow-Credentials: "'true'" }
          /v1/upsert:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpsertFunction.Arn}/invocations"
            options:
              responses:
                '200': { description: CORS preflight response, headers: { Access-Control-Allow-Origin: { schema: { type: string } }, Access-Control-Allow-Methods: { schema: { type: string } }, Access-Control-Allow-Headers: { schema: { type: string } }, Access-Control-Allow-Credentials: { schema: { type: string } } } }
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates: { application/json: '{"statusCode": 200}' }
                responses:
                  default:
                    statusCode: '200'
                    responseParameters: { method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Requested-With'", method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'", method.response.header.Access-Control-Allow-Origin: !If [IsProduction, "'https://gogen.io'", "'https://staging.gogen.io'"], method.response.header.Access-Control-Allow-Credentials: "'true'" }
      Domain:
        DomainName: !If 
          - IsProduction
          - api.gogen.io
          - staging-api.gogen.io
        CertificateArn: !Ref CertificateArn
        EndpointConfiguration: REGIONAL
        BasePath: ''

  GetFunction:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: python3.13-v1
    Properties:
      CodeUri: ./api
      Handler: get.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE_NAME: !If [IsProduction, !Ref ProdTableName, !Ref StagingTableName]

  ListFunction:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: python3.13-v1
    Properties:
      CodeUri: ./api
      Handler: list.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE_NAME: !If [IsProduction, !Ref ProdTableName, !Ref StagingTableName]

  SearchFunction:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: python3.13-v1
    Properties:
      CodeUri: ./api
      Handler: search.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE_NAME: !If [IsProduction, !Ref ProdTableName, !Ref StagingTableName]

  UpsertFunction:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: python3.13-v1
    Properties:
      CodeUri: ./api
      Handler: upsert.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE_NAME: !If [IsProduction, !Ref ProdTableName, !Ref StagingTableName]

Conditions:
  IsStagingEnvironment: !Equals 
    - !Ref Environment
    - staging
  IsProduction: !Equals
    - !Ref Environment
    - prod

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - staging
      - prod
    Description: The environment type
  
  CertificateArn:
    Type: String
    Description: ARN of the ACM certificate for *.gogen.io

  LambdaRoleArn:
    Type: String
    Description: ARN of the IAM role for Lambda functions

  ProdTableName:
    Type: String
    Default: gogen
    Description: Name of the existing DynamoDB table for Production

  StagingTableName:
    Type: String
    Default: gogen-staging
    Description: Name of the existing DynamoDB table for Staging

  ProdBucketName:
    Type: String
    Default: gogen-artifacts-prod
    Description: Name of the S3 bucket for Production artifacts

  StagingBucketName:
    Type: String
    Default: gogen-artifacts-staging
    Description: Name of the S3 bucket for Staging artifacts

Outputs:
  ApiURL:
    Description: API Gateway endpoint URL
    Value: !If
      - IsProduction
      - https://api.gogen.io/
      - https://staging-api.gogen.io/ 